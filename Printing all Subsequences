#include <bits/stdc++.h> // Includes all standard libraries
using namespace std;

// Recursive function to generate all subsequences
void printF(int ind, vector<int> &ds, int arr[], int n) {
    // Base case: when index reaches the end of the array
    if (ind == n) {
        // Print the current subsequence (stored in ds)
        for (auto it : ds) {
            cout << it << " "; // Print each element of the current subsequence
        }
        cout << endl; // Move to the next line after printing one subsequence
        return; // End the current recursive call
    }

    // ----------------------
    // STEP 1: Take the element (Include it in the current subsequence)
    // ----------------------
    ds.push_back(arr[ind]); // Add current element to the subsequence
    printF(ind + 1, ds, arr, n); // Move to the next index

    // ----------------------
    // STEP 2: Not take the element (Backtrack by removing the last added element)
    // ----------------------
    ds.pop_back(); // Remove the last element to undo the inclusion
    printF(ind + 1, ds, arr, n); // Move to the next index without including current element
}

int main() {
    int arr[] = {3, 1, 2}; // Input array
    int n = 3; // Size of the array
    vector<int> ds; // To store one subsequence at a time

    printF(0, ds, arr, n); // Start from index 0

    return 0;
}
